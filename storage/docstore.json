{"docstore/metadata": {"69206787-f62b-47ab-b702-951c6f6f0953": {"doc_hash": "d4f92abb46ddeb2ae796a3ddf9ee4804f85029446f00d1e1a4033aa9722b7f26"}, "6f6d8327-f68e-4b45-b04e-000e69ba44f6": {"doc_hash": "1eb6d7898d788e7e1859aa9b9bce8455bf69d63200a4e689b5400087d881b590"}, "3995196e-f983-4927-ab08-25822bafaad9": {"doc_hash": "1a21338e1e2d4dbffca73cd302d9feaabfffbc0d7ca8b1cfa02f5ee494c43d88"}, "ff9c5728-d25d-4ef2-a13b-dfcd7645cb82": {"doc_hash": "4abfd7b901c86ad13c3f846f3f73fa3cce8192b22b6e32a5d663a582514ccf82"}, "22bd2a6a-c4f0-42e7-8183-07f0f09ee118": {"doc_hash": "9eb718fd1f6c7f1dce48a1ca2101b7a1100d24f3d2513e25c8490c48b4fb55d2"}, "52fc8216-c477-4f3f-81b4-75ca0022157c": {"doc_hash": "ab46fe24cc960db1ee436e4de7285ab153a8b51a0016646be4e0195eec38f4fa"}, "2fdcdbba-0544-44bc-ae72-08ab85786a5d": {"doc_hash": "e9da99715f50ed90c841b67361620b89832676e722d560fdee149e781f7c2206"}, "e4decee7-ec35-451f-95c6-75fa815a8541": {"doc_hash": "7e2a40f99c4e7a1aee5c21a1f17bc7a204b3d9270fda9a70984d2d26b1b4f0ff"}, "08e6cd22-bd6f-4665-9fc2-fd46bb6c4648": {"doc_hash": "9ee5fdbfa6ecc0d144a1b9cf8c4d0de6285f238e5dc852963566afb4c3516695"}, "95c58b2c-7718-4e13-9a3a-cc3ffc8cdca0": {"doc_hash": "1899c5f3bc147129d0bc6974e54412f7d552db41932105bb60e6dac4f8b9516d"}, "fa4f7a41-cdda-42a2-b60b-adda7d234dbe": {"doc_hash": "85dfe5001c243ff55e33a359ea669dae2558643c5db0cbe2a5e65b009372db5a"}, "bdb87fc3-5df1-42b5-805d-66623d2b9afe": {"doc_hash": "1347ac01eb554908097cb10f196ab5bcb0aca89f5df192e93a5c6f414119835d"}, "f32f11f8-dc17-40e1-a1bc-accbd7334191": {"doc_hash": "f9042a0e0290a7b7f39fb1482c2c904452ec68d9c304d3ac52273b688cfed936"}, "60df2287-5d40-4113-9aa0-aee9cdab5408": {"doc_hash": "c7482ea19d80897f240c87c0d4c8a4bb6a1f4b82b3bd529c3d6d93ffba8a8491"}, "96ab01eb-edcf-46b4-a295-b15232dbe048": {"doc_hash": "5076737cd7e2486957e2402434bcc0f3650f0529f54e2a548a563b36afca4cec"}, "9e8148b1-aa25-4dbe-977c-5742d68c3064": {"doc_hash": "d152e48408d83dee56ef3bbe497d0eca62512c72769ab4000c6389b16750be0d"}, "86f02e55-f513-40f9-abe3-b17d2d6cd99a": {"doc_hash": "1149b1b4871eafbd8600422296e9187a5508c36c410dbcf80843a263cad7c8fc"}, "d89999e8-2ffc-458d-89f1-db7684e14760": {"doc_hash": "bf09548c0579d8d3a1f51b061dafa574f83e0929daa6e1b645571119a1e607a1"}, "3a9481c6-42aa-44fb-ab6b-281a2a3f49ea": {"doc_hash": "3673d3031790ac7d5fd0f776e11225c812d6de9a75af3e2ebc7d43d171f17fb9"}, "db20a2fb-fc13-4379-8672-62afc495565a": {"doc_hash": "d87f6f4e8109db658df24fde1accc787ab6e4c98d5cdb6951344d4e3a32ed2a1"}, "30ad233f-cc9b-4e1b-845b-6cc1e50caa88": {"doc_hash": "3036bb0664be0aff5f0789dc842c726915e84f3a5db2579377c6a32acf5aafff"}, "34df177c-c8fe-4c67-bbff-519f21a05cb5": {"doc_hash": "d4f92abb46ddeb2ae796a3ddf9ee4804f85029446f00d1e1a4033aa9722b7f26", "ref_doc_id": "69206787-f62b-47ab-b702-951c6f6f0953"}, "47ccf89b-8f8b-4a71-984f-1a0b526067c4": {"doc_hash": "e203daf78048f2496fbeaf8b6fa26bcd2231a9974d49221033b383eea6d9bd83", "ref_doc_id": "6f6d8327-f68e-4b45-b04e-000e69ba44f6"}, "e5719cbf-6257-48b8-8d8b-8757566c3632": {"doc_hash": "1e5421eac12d3cfac18db92e2547f145e3b2ea8b9ecc6ecdeba3b7beb6fd45de", "ref_doc_id": "6f6d8327-f68e-4b45-b04e-000e69ba44f6"}, "432ebade-76b0-47f3-bd46-ce5fc4ab4f60": {"doc_hash": "1a21338e1e2d4dbffca73cd302d9feaabfffbc0d7ca8b1cfa02f5ee494c43d88", "ref_doc_id": "3995196e-f983-4927-ab08-25822bafaad9"}, "2630029c-98cd-485c-8f51-efe6b47b1549": {"doc_hash": "4abfd7b901c86ad13c3f846f3f73fa3cce8192b22b6e32a5d663a582514ccf82", "ref_doc_id": "ff9c5728-d25d-4ef2-a13b-dfcd7645cb82"}, "66f87375-230e-4974-8977-f1f34a5f3fc5": {"doc_hash": "9eb718fd1f6c7f1dce48a1ca2101b7a1100d24f3d2513e25c8490c48b4fb55d2", "ref_doc_id": "22bd2a6a-c4f0-42e7-8183-07f0f09ee118"}, "88a26f90-cbbd-4dc4-b37a-567739a99802": {"doc_hash": "99d3e4afc2d6cd18b3fa145d6532c822b600b2448d2843120ee3755a97815e21", "ref_doc_id": "52fc8216-c477-4f3f-81b4-75ca0022157c"}, "8f2cba8f-29bc-4d2e-b1a3-0989a27f547e": {"doc_hash": "9d9fa306d234bfa7424c4cb369458c9c584057a3dc83d4059be9e909e7effc12", "ref_doc_id": "52fc8216-c477-4f3f-81b4-75ca0022157c"}, "27a64440-52f3-486a-99f1-7dbe6dbb5ad8": {"doc_hash": "e9da99715f50ed90c841b67361620b89832676e722d560fdee149e781f7c2206", "ref_doc_id": "2fdcdbba-0544-44bc-ae72-08ab85786a5d"}, "eff381f9-87e4-44a4-a537-3ee80649c8da": {"doc_hash": "991a0a2591170afbaf7c9b0513f9a313f875a47f5c74e9a0f75f3d658afa601b", "ref_doc_id": "e4decee7-ec35-451f-95c6-75fa815a8541"}, "2362d688-4062-4fc5-b301-59bcafa7283a": {"doc_hash": "822bf55294bc4c1fd49e10193049c83b7e91861d3bbff5d7367607b664507ce6", "ref_doc_id": "e4decee7-ec35-451f-95c6-75fa815a8541"}, "94520a43-201e-4f7e-a7c6-fa073bee202e": {"doc_hash": "9e22a684bcc4bf5fcbba1648bc4f271d5a677b0f4e9850f62594e9b4d2290e4e", "ref_doc_id": "08e6cd22-bd6f-4665-9fc2-fd46bb6c4648"}, "99074269-b92b-4d09-b7fd-d5891880bcfc": {"doc_hash": "db0842e5ef7fe1fbecb348fb798fdf73d88c3f5a729d2c8a6bbba02db0caa73b", "ref_doc_id": "08e6cd22-bd6f-4665-9fc2-fd46bb6c4648"}, "3f3a9ec8-2660-4093-9d94-abfd95dacdd3": {"doc_hash": "83c9de86610d8efdcf1f290e346703a8486fbe7ee90f890f97d70be6a7e93196", "ref_doc_id": "95c58b2c-7718-4e13-9a3a-cc3ffc8cdca0"}, "af8ce8ec-1926-44ed-bc12-28bc9be96a3e": {"doc_hash": "7932ae0d09ce7b1f8a643284e2db361394619cbb9039d534713283307785a10d", "ref_doc_id": "95c58b2c-7718-4e13-9a3a-cc3ffc8cdca0"}, "06e8dde6-c086-4692-9b62-f78adcb23557": {"doc_hash": "85dfe5001c243ff55e33a359ea669dae2558643c5db0cbe2a5e65b009372db5a", "ref_doc_id": "fa4f7a41-cdda-42a2-b60b-adda7d234dbe"}, "68c77fa7-411f-4263-bdbe-d9e7b9051490": {"doc_hash": "df452e84d69756cf70a9b5b41f0412dfd9f8c76a748867ae7a702696ac08c69d", "ref_doc_id": "bdb87fc3-5df1-42b5-805d-66623d2b9afe"}, "de2df8a6-6a8f-4786-bfc4-76ea93c7135f": {"doc_hash": "02415fbc4d6bc7b893b4c4b75483b5b9478f71412ac9980c98d08594ee550ed4", "ref_doc_id": "bdb87fc3-5df1-42b5-805d-66623d2b9afe"}, "95b7f60b-866f-4c95-9142-9656dd59a796": {"doc_hash": "75ddeb7d7eed8d52ab7fd4c7e844d56cb3f98aaa5b5185af65d2909f3d743c3b", "ref_doc_id": "f32f11f8-dc17-40e1-a1bc-accbd7334191"}, "688909d9-489d-419e-a53d-eef5ad62cf0d": {"doc_hash": "3548f9436db25f6bd1bc53efc989e454496c6ab1d3e35ee022d0362bf281b0c7", "ref_doc_id": "f32f11f8-dc17-40e1-a1bc-accbd7334191"}, "677352d8-edf6-406d-be64-eac248dcf151": {"doc_hash": "6456da5bed101a428353400f2b8e9f27a13592b6aecc05776c2a2e200a2757d5", "ref_doc_id": "60df2287-5d40-4113-9aa0-aee9cdab5408"}, "d746aca8-dc1c-4f4c-a779-d3370aff2fe0": {"doc_hash": "9262b49cf0d294381f95402739176e0c8bce9140316bbf41c67c1aba53e0f28a", "ref_doc_id": "60df2287-5d40-4113-9aa0-aee9cdab5408"}, "c70aa6b1-950c-42af-8db1-f8915d8b3af0": {"doc_hash": "00abd41dc12f80b6e99bb1808f25e668375cc089c7cde47dedd0118d752d276c", "ref_doc_id": "96ab01eb-edcf-46b4-a295-b15232dbe048"}, "768a019d-5b8e-44fd-8954-b08b1e2ac27b": {"doc_hash": "bbccbb582d16c65d991c6c8d8b37cacffa8633bb8c7962cfb5aca5723c17498a", "ref_doc_id": "96ab01eb-edcf-46b4-a295-b15232dbe048"}, "b45acafd-cc20-4cee-a800-a79741a79b4c": {"doc_hash": "4d138ab10ad5649b1ae0d7c2adc65f8f5e3035313ff883a4d42863cc89a4ca4c", "ref_doc_id": "9e8148b1-aa25-4dbe-977c-5742d68c3064"}, "afc2cdca-d403-4542-90b6-621a828f2191": {"doc_hash": "5edfe920c40dd6a2f8be9ac16df09b8a4a8e36a95dc93d91ae5bb81eeba30d18", "ref_doc_id": "9e8148b1-aa25-4dbe-977c-5742d68c3064"}, "2f6ea2b1-d7bb-425c-a743-592c9ca274c3": {"doc_hash": "ef17eee5dfd9482824dcf7534c89155b060c830d5fc1d546ae6ec1d217bb72e1", "ref_doc_id": "86f02e55-f513-40f9-abe3-b17d2d6cd99a"}, "38624dfc-ca34-4524-a1fc-c11cb87aeea7": {"doc_hash": "88257efd52604399e472320dc58b1766d1065fd51df0ac680e28489fead7975b", "ref_doc_id": "86f02e55-f513-40f9-abe3-b17d2d6cd99a"}, "fbbba503-d48d-4e22-a428-01e158875823": {"doc_hash": "3e38465cf08334041da90b5f5499ac852e2394d61c4b12feb204973c7ad99ae2", "ref_doc_id": "d89999e8-2ffc-458d-89f1-db7684e14760"}, "05c3e2c8-6e02-4417-957a-11e755f3e037": {"doc_hash": "488e5893fc2781d8df96f18186f418f926ceff1ea45cc9e9f3d4eb6a2c7cd973", "ref_doc_id": "d89999e8-2ffc-458d-89f1-db7684e14760"}, "4ecabde7-7489-4a1a-ab33-1d9b2b4f9ea4": {"doc_hash": "0671c9899f8859ce9d9ab2bb98681ee614eae980f1ae69e872fd8f86ccd3fdd6", "ref_doc_id": "d89999e8-2ffc-458d-89f1-db7684e14760"}, "aeed63a7-c10b-42e0-bc8f-87f249b9cf22": {"doc_hash": "d70c039ce094696feb013cc758ab505eeb4174248ee03ca1334efeaaa81a9ae2", "ref_doc_id": "d89999e8-2ffc-458d-89f1-db7684e14760"}, "c14b7e59-46d8-4b97-bc58-4e2ea53b757c": {"doc_hash": "3673d3031790ac7d5fd0f776e11225c812d6de9a75af3e2ebc7d43d171f17fb9", "ref_doc_id": "3a9481c6-42aa-44fb-ab6b-281a2a3f49ea"}, "8b803fd9-af71-42f1-a138-04a629859ebb": {"doc_hash": "602eecf8481050e559ecccdd16137e5452479fdd9c19b12452bc5cbf01e88f9c", "ref_doc_id": "db20a2fb-fc13-4379-8672-62afc495565a"}, "b3b21366-e166-444d-a6e9-f928ed31e89f": {"doc_hash": "264e87c9e166440ff032d8ead2b1956a53feffccb99ade021a1a0bb8ec0a7bf4", "ref_doc_id": "db20a2fb-fc13-4379-8672-62afc495565a"}, "e522baf0-670f-41ce-a5fa-cf1de546d418": {"doc_hash": "ffb9ccd4b87bc99343e9e8ce1e3e1688b30b14f547f1961904574dba646cf1c3", "ref_doc_id": "db20a2fb-fc13-4379-8672-62afc495565a"}, "371e5600-4d8b-41bc-910e-e77bc49885db": {"doc_hash": "3036bb0664be0aff5f0789dc842c726915e84f3a5db2579377c6a32acf5aafff", "ref_doc_id": "30ad233f-cc9b-4e1b-845b-6cc1e50caa88"}}, "docstore/data": {"34df177c-c8fe-4c67-bbff-519f21a05cb5": {"__data__": {"id_": "34df177c-c8fe-4c67-bbff-519f21a05cb5", "embedding": null, "metadata": {"page_label": "1", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "69206787-f62b-47ab-b702-951c6f6f0953", "node_type": "4", "metadata": {"page_label": "1", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "d4f92abb46ddeb2ae796a3ddf9ee4804f85029446f00d1e1a4033aa9722b7f26", "class_name": "RelatedNodeInfo"}}, "text": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder. The best\nperforming models also connect the encoder and decoder through an attention\nmechanism. We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely. Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train. Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5]. Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n\u2217Equal contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea. Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work. Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail. Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations. Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n\u2020Work performed while at Google Brain.\n\u2021Work performed while at Google Research.\n31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2903, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "47ccf89b-8f8b-4a71-984f-1a0b526067c4": {"__data__": {"id_": "47ccf89b-8f8b-4a71-984f-1a0b526067c4", "embedding": null, "metadata": {"page_label": "2", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6f6d8327-f68e-4b45-b04e-000e69ba44f6", "node_type": "4", "metadata": {"page_label": "2", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "1eb6d7898d788e7e1859aa9b9bce8455bf69d63200a4e689b5400087d881b590", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e5719cbf-6257-48b8-8d8b-8757566c3632", "node_type": "1", "metadata": {}, "hash": "7383ce35ba650201061ff5a0c64ec6785d77dd549d5d6c72027649b094d2e48d", "class_name": "RelatedNodeInfo"}}, "text": "Recurrent models typically factor computation along the symbol positions of the input and output\nsequences. Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter. The fundamental\nconstraint of sequential computation, however, remains.\nAttention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16]. In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\nIn this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\nThe Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11]. In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\nSelf-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\nEnd-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\nTo the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution. In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\nHere, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n). Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3676, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e5719cbf-6257-48b8-8d8b-8757566c3632": {"__data__": {"id_": "e5719cbf-6257-48b8-8d8b-8757566c3632", "embedding": null, "metadata": {"page_label": "2", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6f6d8327-f68e-4b45-b04e-000e69ba44f6", "node_type": "4", "metadata": {"page_label": "2", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "1eb6d7898d788e7e1859aa9b9bce8455bf69d63200a4e689b5400087d881b590", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "47ccf89b-8f8b-4a71-984f-1a0b526067c4", "node_type": "1", "metadata": {"page_label": "2", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "e203daf78048f2496fbeaf8b6fa26bcd2231a9974d49221033b383eea6d9bd83", "class_name": "RelatedNodeInfo"}}, "text": "At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\nThe Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers. Each layer has two\nsub-layers. The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2", "mimetype": "text/plain", "start_char_idx": 3677, "end_char_idx": 4249, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "432ebade-76b0-47f3-bd46-ce5fc4ab4f60": {"__data__": {"id_": "432ebade-76b0-47f3-bd46-ce5fc4ab4f60", "embedding": null, "metadata": {"page_label": "3", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3995196e-f983-4927-ab08-25822bafaad9", "node_type": "4", "metadata": {"page_label": "3", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "1a21338e1e2d4dbffca73cd302d9feaabfffbc0d7ca8b1cfa02f5ee494c43d88", "class_name": "RelatedNodeInfo"}}, "text": "Figure 1: The Transformer - model architecture.\nwise fully connected feed-forward network. We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1]. That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\nDecoder: The decoder is also composed of a stack of N= 6identical layers. In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). The input consists of\nqueries and keys of dimension dk, and values of dimension dv. We compute the dot products of the\n3", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1755, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2630029c-98cd-485c-8f51-efe6b47b1549": {"__data__": {"id_": "2630029c-98cd-485c-8f51-efe6b47b1549", "embedding": null, "metadata": {"page_label": "4", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ff9c5728-d25d-4ef2-a13b-dfcd7645cb82", "node_type": "4", "metadata": {"page_label": "4", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "4abfd7b901c86ad13c3f846f3f73fa3cce8192b22b6e32a5d663a582514ccf82", "class_name": "RelatedNodeInfo"}}, "text": "Scaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of several\nattention layers running in parallel.\nquery with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\nIn practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV. We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk. Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer. While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\nWhile for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3]. We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4. To counteract this effect, we scale the dot products by1\u221adk.\n3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively. On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values. These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\nMulti-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. With a single attention head, averaging inhibits this.\n4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1. Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n4", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2419, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "66f87375-230e-4974-8977-f1f34a5f3fc5": {"__data__": {"id_": "66f87375-230e-4974-8977-f1f34a5f3fc5", "embedding": null, "metadata": {"page_label": "5", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "22bd2a6a-c4f0-42e7-8183-07f0f09ee118", "node_type": "4", "metadata": {"page_label": "5", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "9eb718fd1f6c7f1dce48a1ca2101b7a1100d24f3d2513e25c8490c48b4fb55d2", "class_name": "RelatedNodeInfo"}}, "text": "MultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\nIn this work we employ h= 8 parallel attention layers, or heads. For each of these we use\ndk=dv=dmodel/h= 64 . Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. This allows every\nposition in the decoder to attend over all positions in the input sequence. This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n\u2022The encoder contains self-attention layers. In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n\u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property. We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections. See Figure 2.\n3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. This\nconsists of two linear transformations with a ReLU activation in between.\nFFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. Another way of describing this is as two convolutions with kernel size 1.\nThe dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24]. In the embedding layers, we multiply those weights by\u221admodel.\n3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the\n5", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3174, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "88a26f90-cbbd-4dc4-b37a-567739a99802": {"__data__": {"id_": "88a26f90-cbbd-4dc4-b37a-567739a99802", "embedding": null, "metadata": {"page_label": "6", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "52fc8216-c477-4f3f-81b4-75ca0022157c", "node_type": "4", "metadata": {"page_label": "6", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "ab46fe24cc960db1ee436e4de7285ab153a8b51a0016646be4e0195eec38f4fa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8f2cba8f-29bc-4d2e-b1a3-0989a27f547e", "node_type": "1", "metadata": {}, "hash": "c4147c3b2249172d3efe13d939ba5d94c9e0351960da0ec6922dc9c5c4263646", "class_name": "RelatedNodeInfo"}}, "text": "Table 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types. nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\nLayer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks. The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. There are many choices of positional encodings,\nlearned and \ufb01xed [8].\nIn this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension. That is, each dimension of the positional encoding\ncorresponds to a sinusoid. The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0. We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\nWe also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we\nconsider three desiderata.\nOne is the total computational complexity per layer. Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\nThe third is the path length between long-range dependencies in the network. Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11]. Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\nAs noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations. In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3346, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8f2cba8f-29bc-4d2e-b1a3-0989a27f547e": {"__data__": {"id_": "8f2cba8f-29bc-4d2e-b1a3-0989a27f547e", "embedding": null, "metadata": {"page_label": "6", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "52fc8216-c477-4f3f-81b4-75ca0022157c", "node_type": "4", "metadata": {"page_label": "6", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "ab46fe24cc960db1ee436e4de7285ab153a8b51a0016646be4e0195eec38f4fa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "88a26f90-cbbd-4dc4-b37a-567739a99802", "node_type": "1", "metadata": {"page_label": "6", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "99d3e4afc2d6cd18b3fa145d6532c822b600b2448d2843120ee3755a97815e21", "class_name": "RelatedNodeInfo"}}, "text": "To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6", "mimetype": "text/plain", "start_char_idx": 3347, "end_char_idx": 3508, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "27a64440-52f3-486a-99f1-7dbe6dbb5ad8": {"__data__": {"id_": "27a64440-52f3-486a-99f1-7dbe6dbb5ad8", "embedding": null, "metadata": {"page_label": "7", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2fdcdbba-0544-44bc-ae72-08ab85786a5d", "node_type": "4", "metadata": {"page_label": "7", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "e9da99715f50ed90c841b67361620b89832676e722d560fdee149e781f7c2206", "class_name": "RelatedNodeInfo"}}, "text": "the input sequence centered around the respective output position. This would increase the maximum\npath length to O(n/r). We plan to investigate this approach further in future work.\nA single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions. Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network. Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2). Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\nAs side bene\ufb01t, self-attention could yield more interpretable models. We inspect attention distributions\nfrom our models and present and discuss examples in the appendix. Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n5 Training\nThis section describes the training regime for our models.\n5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens. For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31]. Sentence pairs were batched together by approximate sequence length. Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. We\ntrained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds. The big models were trained for 300,000 steps\n(3.5 days).\n5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129. We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. We used\nwarmup _steps = 4000 .\n5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. For the base model, we use a rate of\nPdrop= 0.1.\n7", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3209, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eff381f9-87e4-44a4-a537-3ee80649c8da": {"__data__": {"id_": "eff381f9-87e4-44a4-a537-3ee80649c8da", "embedding": null, "metadata": {"page_label": "8", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e4decee7-ec35-451f-95c6-75fa815a8541", "node_type": "4", "metadata": {"page_label": "8", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "7e2a40f99c4e7a1aee5c21a1f17bc7a204b3d9270fda9a70984d2d26b1b4f0ff", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2362d688-4062-4fc5-b301-59bcafa7283a", "node_type": "1", "metadata": {}, "hash": "3405ae7c06babe5e65483a82674a12352c0e58585f75422b4f3dee49869e2165", "class_name": "RelatedNodeInfo"}}, "text": "Table 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\nModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30]. This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. The con\ufb01guration of this model is\nlisted in the bottom line of Table 3. Training took 3.5days on 8P100 GPUs. Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\nOn the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model. The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\nFor the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31]. These hyperparameters\nwere chosen after experimentation on the development set. We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\nTable 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2533, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2362d688-4062-4fc5-b301-59bcafa7283a": {"__data__": {"id_": "2362d688-4062-4fc5-b301-59bcafa7283a", "embedding": null, "metadata": {"page_label": "8", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e4decee7-ec35-451f-95c6-75fa815a8541", "node_type": "4", "metadata": {"page_label": "8", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "7e2a40f99c4e7a1aee5c21a1f17bc7a204b3d9270fda9a70984d2d26b1b4f0ff", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "eff381f9-87e4-44a4-a537-3ee80649c8da", "node_type": "1", "metadata": {"page_label": "8", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "991a0a2591170afbaf7c9b0513f9a313f875a47f5c74e9a0f75f3d658afa601b", "class_name": "RelatedNodeInfo"}}, "text": "6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013. We used beam search as described in the previous section, but no\ncheckpoint averaging. We present these results in Table 3.\nIn Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n8", "mimetype": "text/plain", "start_char_idx": 2534, "end_char_idx": 3283, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "94520a43-201e-4f7e-a7c6-fa073bee202e": {"__data__": {"id_": "94520a43-201e-4f7e-a7c6-fa073bee202e", "embedding": null, "metadata": {"page_label": "9", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "08e6cd22-bd6f-4665-9fc2-fd46bb6c4648", "node_type": "4", "metadata": {"page_label": "9", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "9ee5fdbfa6ecc0d144a1b9cf8c4d0de6285f238e5dc852963566afb4c3516695", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "99074269-b92b-4d09-b7fd-d5891880bcfc", "node_type": "1", "metadata": {}, "hash": "5a8e6ad94f9cd9321a0b7e4ac8faae9ecbdc72313676ea987fbbc557b5ae3523", "class_name": "RelatedNodeInfo"}}, "text": "Table 3: Variations on the Transformer architecture. Unlisted values are identical to those of the base\nmodel. All metrics are on the English-to-German translation development set, newstest2013. Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\nN d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality. This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial. We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting. In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\nFor translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. In the former task our best\nmodel outperforms even all previously reported ensembles.\nWe are excited about the future of attention-based models and plan to apply them to other tasks. We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video. Making generation less sequential is another research goals of ours.\nThe code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2478, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "99074269-b92b-4d09-b7fd-d5891880bcfc": {"__data__": {"id_": "99074269-b92b-4d09-b7fd-d5891880bcfc", "embedding": null, "metadata": {"page_label": "9", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "08e6cd22-bd6f-4665-9fc2-fd46bb6c4648", "node_type": "4", "metadata": {"page_label": "9", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "9ee5fdbfa6ecc0d144a1b9cf8c4d0de6285f238e5dc852963566afb4c3516695", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "94520a43-201e-4f7e-a7c6-fa073bee202e", "node_type": "1", "metadata": {"page_label": "9", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "9e22a684bcc4bf5fcbba1648bc4f271d5a677b0f4e9850f62594e9b4d2290e4e", "class_name": "RelatedNodeInfo"}}, "text": "Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n9", "mimetype": "text/plain", "start_char_idx": 2479, "end_char_idx": 2609, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f3a9ec8-2660-4093-9d94-abfd95dacdd3": {"__data__": {"id_": "3f3a9ec8-2660-4093-9d94-abfd95dacdd3", "embedding": null, "metadata": {"page_label": "10", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "95c58b2c-7718-4e13-9a3a-cc3ffc8cdca0", "node_type": "4", "metadata": {"page_label": "10", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "1899c5f3bc147129d0bc6974e54412f7d552db41932105bb60e6dac4f8b9516d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "af8ce8ec-1926-44ed-bc12-28bc9be96a3e", "node_type": "1", "metadata": {}, "hash": "dc006f60ef68733fe6e73d7643dca363dac8c75b03d4a2977d666a991bc0714f", "class_name": "RelatedNodeInfo"}}, "text": "References\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprint\narXiv:1607.06450 , 2016.\n[2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly\nlearning to align and translate. CoRR , abs/1409.0473, 2014.\n[3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . Le. Massive exploration of neural\nmachine translation architectures. CoRR , abs/1703.03906, 2017.\n[4]Jianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machine\nreading. arXiv preprint arXiv:1601.06733 , 2016.\n[5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio. Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation. CoRR , abs/1406.1078, 2014.\n[6]Francois Chollet. Xception: Deep learning with depthwise separable convolutions. arXiv\npreprint arXiv:1610.02357 , 2016.\n[7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio. Empirical evaluation\nof gated recurrent neural networks on sequence modeling. CoRR , abs/1412.3555, 2014.\n[8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. Convolu-\ntional sequence to sequence learning. arXiv preprint arXiv:1705.03122v2 , 2017.\n[9]Alex Graves. Generating sequences with recurrent neural networks. arXiv preprint\narXiv:1308.0850 , 2013.\n[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for im-\nage recognition. In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n[11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber. Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n[12] Sepp Hochreiter and J\u00fcrgen Schmidhuber. Long short-term memory. Neural computation ,\n9(8):1735\u20131780, 1997.\n[13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. Exploring\nthe limits of language modeling. arXiv preprint arXiv:1602.02410 , 2016.\n[14] \u0141ukasz Kaiser and Ilya Sutskever. Neural GPUs learn algorithms. In International Conference\non Learning Representations (ICLR) , 2016.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2188, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "af8ce8ec-1926-44ed-bc12-28bc9be96a3e": {"__data__": {"id_": "af8ce8ec-1926-44ed-bc12-28bc9be96a3e", "embedding": null, "metadata": {"page_label": "10", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "95c58b2c-7718-4e13-9a3a-cc3ffc8cdca0", "node_type": "4", "metadata": {"page_label": "10", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "1899c5f3bc147129d0bc6974e54412f7d552db41932105bb60e6dac4f8b9516d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3f3a9ec8-2660-4093-9d94-abfd95dacdd3", "node_type": "1", "metadata": {"page_label": "10", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "83c9de86610d8efdcf1f290e346703a8486fbe7ee90f890f97d70be6a7e93196", "class_name": "RelatedNodeInfo"}}, "text": "In International Conference\non Learning Representations (ICLR) , 2016.\n[15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu. Neural machine translation in linear time. arXiv preprint arXiv:1610.10099v2 ,\n2017.\n[16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. Structured attention networks.\nInInternational Conference on Learning Representations , 2017.\n[17] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR , 2015.\n[18] Oleksii Kuchaiev and Boris Ginsburg. Factorization tricks for LSTM networks. arXiv preprint\narXiv:1703.10722 , 2017.\n[19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio. A structured self-attentive sentence embedding. arXiv preprint\narXiv:1703.03130 , 2017.\n[20] Samy Bengio \u0141ukasz Kaiser. Can active memory replace attention? In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n10", "mimetype": "text/plain", "start_char_idx": 2118, "end_char_idx": 3099, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "06e8dde6-c086-4692-9b62-f78adcb23557": {"__data__": {"id_": "06e8dde6-c086-4692-9b62-f78adcb23557", "embedding": null, "metadata": {"page_label": "11", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fa4f7a41-cdda-42a2-b60b-adda7d234dbe", "node_type": "4", "metadata": {"page_label": "11", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "85dfe5001c243ff55e33a359ea669dae2558643c5db0cbe2a5e65b009372db5a", "class_name": "RelatedNodeInfo"}}, "text": "[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. Effective approaches to attention-\nbased neural machine translation. arXiv preprint arXiv:1508.04025 , 2015.\n[22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit. A decomposable attention\nmodel. In Empirical Methods in Natural Language Processing , 2016.\n[23] Romain Paulus, Caiming Xiong, and Richard Socher. A deep reinforced model for abstractive\nsummarization. arXiv preprint arXiv:1705.04304 , 2017.\n[24] O\ufb01r Press and Lior Wolf. Using the output embedding to improve language models. arXiv\npreprint arXiv:1608.05859 , 2016.\n[25] Rico Sennrich, Barry Haddow, and Alexandra Birch. Neural machine translation of rare words\nwith subword units. arXiv preprint arXiv:1508.07909 , 2015.\n[26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean. Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer. arXiv preprint arXiv:1701.06538 , 2017.\n[27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov. Dropout: a simple way to prevent neural networks from over\ufb01tting. Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. End-to-end memory\nnetworks. In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448. Curran Associates,\nInc., 2015.\n[29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. Sequence to sequence learning with neural\nnetworks. In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n[30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\nRethinking the inception architecture for computer vision. CoRR , abs/1512.00567, 2015.\n[31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation. arXiv preprint\narXiv:1609.08144 , 2016.\n[32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. Deep recurrent models with\nfast-forward connections for neural machine translation. CoRR , abs/1606.04199, 2016.\n11", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2337, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "68c77fa7-411f-4263-bdbe-d9e7b9051490": {"__data__": {"id_": "68c77fa7-411f-4263-bdbe-d9e7b9051490", "embedding": null, "metadata": {"page_label": "1", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bdb87fc3-5df1-42b5-805d-66623d2b9afe", "node_type": "4", "metadata": {"page_label": "1", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "1347ac01eb554908097cb10f196ab5bcb0aca89f5df192e93a5c6f414119835d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "de2df8a6-6a8f-4786-bfc4-76ea93c7135f", "node_type": "1", "metadata": {}, "hash": "ea04a53d23db7e6054ea9e2b061dd13cfdf457794c5e1ca89eadafba908350a6", "class_name": "RelatedNodeInfo"}}, "text": "You Only Look Once:\nUni\ufb01ed, Real-Time Object Detection\nJoseph Redmon\u2217, Santosh Divvala\u2217\u2020, Ross Girshick\u00b6, Ali Farhadi\u2217\u2020\nUniversity of Washington\u2217, Allen Institute for AI\u2020, Facebook AI Research\u00b6\nhttp://pjreddie.com/yolo/\nAbstract\nWe present YOLO, a new approach to object detection.\nPrior work on object detection repurposes classi\ufb01ers to per-\nform detection. Instead, we frame object detection as a re-\ngression problem to spatially separated bounding boxes and\nassociated class probabilities. A single neural network pre-\ndicts bounding boxes and class probabilities directly from\nfull images in one evaluation. Since the whole detection\npipeline is a single network, it can be optimized end-to-end\ndirectly on detection performance.\nOur uni\ufb01ed architecture is extremely fast. Our base\nYOLO model processes images in real-time at 45 frames\nper second. A smaller version of the network, Fast YOLO,\nprocesses an astounding 155 frames per second while\nstill achieving double the mAP of other real-time detec-\ntors. Compared to state-of-the-art detection systems, YOLO\nmakes more localization errors but is less likely to predict\nfalse positives on background. Finally, YOLO learns very\ngeneral representations of objects. It outperforms other de-\ntection methods, including DPM and R-CNN, when gener-\nalizing from natural images to other domains like artwork.\n1. Introduction\nHumans glance at an image and instantly know what ob-\njects are in the image, where they are, and how they inter-\nact. The human visual system is fast and accurate, allow-\ning us to perform complex tasks like driving with little con-\nscious thought. Fast, accurate algorithms for object detec-\ntion would allow computers to drive cars without special-\nized sensors, enable assistive devices to convey real-time\nscene information to human users, and unlock the potential\nfor general purpose, responsive robotic systems.\nCurrent detection systems repurpose classi\ufb01ers to per-\nform detection. To detect an object, these systems take a\nclassi\ufb01er for that object and evaluate it at various locations\nand scales in a test image. Systems like deformable parts\nmodels (DPM) use a sliding window approach where the\nclassi\ufb01er is run at evenly spaced locations over the entire\nimage [10].\nMore recent approaches like R-CNN use region proposal\n1. Resize image.\n2. Run convolutional network.3. Non-max suppression.\nDog: 0.30Person: 0.64Horse: 0.28Figure 1: The YOLO Detection System. Processing images\nwith YOLO is simple and straightforward. Our system (1) resizes\nthe input image to 448\u00d7448, (2) runs a single convolutional net-\nwork on the image, and (3) thresholds the resulting detections by\nthe model\u2019s con\ufb01dence.\nmethods to \ufb01rst generate potential bounding boxes in an im-\nage and then run a classi\ufb01er on these proposed boxes. After\nclassi\ufb01cation, post-processing is used to re\ufb01ne the bound-\ning boxes, eliminate duplicate detections, and rescore the\nboxes based on other objects in the scene [13]. These com-\nplex pipelines are slow and hard to optimize because each\nindividual component must be trained separately.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3084, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "de2df8a6-6a8f-4786-bfc4-76ea93c7135f": {"__data__": {"id_": "de2df8a6-6a8f-4786-bfc4-76ea93c7135f", "embedding": null, "metadata": {"page_label": "1", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bdb87fc3-5df1-42b5-805d-66623d2b9afe", "node_type": "4", "metadata": {"page_label": "1", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "1347ac01eb554908097cb10f196ab5bcb0aca89f5df192e93a5c6f414119835d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "68c77fa7-411f-4263-bdbe-d9e7b9051490", "node_type": "1", "metadata": {"page_label": "1", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "df452e84d69756cf70a9b5b41f0412dfd9f8c76a748867ae7a702696ac08c69d", "class_name": "RelatedNodeInfo"}}, "text": "We reframe object detection as a single regression prob-\nlem, straight from image pixels to bounding box coordi-\nnates and class probabilities. Using our system, you only\nlook once (YOLO) at an image to predict what objects are\npresent and where they are.\nYOLO is refreshingly simple: see Figure 1. A sin-\ngle convolutional network simultaneously predicts multi-\nple bounding boxes and class probabilities for those boxes.\nYOLO trains on full images and directly optimizes detec-\ntion performance. This uni\ufb01ed model has several bene\ufb01ts\nover traditional methods of object detection.\nFirst, YOLO is extremely fast. Since we frame detection\nas a regression problem we don\u2019t need a complex pipeline.\nWe simply run our neural network on a new image at test\ntime to predict detections. Our base network runs at 45\nframes per second with no batch processing on a Titan X\nGPU and a fast version runs at more than 150 fps. This\nmeans we can process streaming video in real-time with\nless than 25 milliseconds of latency. Furthermore, YOLO\nachieves more than twice the mean average precision of\nother real-time systems. For a demo of our system running\nin real-time on a webcam please see our project webpage:\nhttp://pjreddie.com/yolo/ .\nSecond, YOLO reasons globally about the image when\n1arXiv:1506.02640v5  [cs.CV]  9 May 2016", "mimetype": "text/plain", "start_char_idx": 3085, "end_char_idx": 4404, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "95b7f60b-866f-4c95-9142-9656dd59a796": {"__data__": {"id_": "95b7f60b-866f-4c95-9142-9656dd59a796", "embedding": null, "metadata": {"page_label": "2", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f32f11f8-dc17-40e1-a1bc-accbd7334191", "node_type": "4", "metadata": {"page_label": "2", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "f9042a0e0290a7b7f39fb1482c2c904452ec68d9c304d3ac52273b688cfed936", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "688909d9-489d-419e-a53d-eef5ad62cf0d", "node_type": "1", "metadata": {}, "hash": "40dae518a99e997af6d78647d3bedb32eca6142dc3b99f9a8b6cc4b947a4dfaf", "class_name": "RelatedNodeInfo"}}, "text": "making predictions. Unlike sliding window and region\nproposal-based techniques, YOLO sees the entire image\nduring training and test time so it implicitly encodes contex-\ntual information about classes as well as their appearance.\nFast R-CNN, a top detection method [14], mistakes back-\nground patches in an image for objects because it can\u2019t see\nthe larger context. YOLO makes less than half the number\nof background errors compared to Fast R-CNN.\nThird, YOLO learns generalizable representations of ob-\njects. When trained on natural images and tested on art-\nwork, YOLO outperforms top detection methods like DPM\nand R-CNN by a wide margin. Since YOLO is highly gen-\neralizable it is less likely to break down when applied to\nnew domains or unexpected inputs.\nYOLO still lags behind state-of-the-art detection systems\nin accuracy. While it can quickly identify objects in im-\nages it struggles to precisely localize some objects, espe-\ncially small ones. We examine these tradeoffs further in our\nexperiments.\nAll of our training and testing code is open source. A\nvariety of pretrained models are also available to download.\n2. Uni\ufb01ed Detection\nWe unify the separate components of object detection\ninto a single neural network. Our network uses features\nfrom the entire image to predict each bounding box. It also\npredicts all bounding boxes across all classes for an im-\nage simultaneously. This means our network reasons glob-\nally about the full image and all the objects in the image.\nThe YOLO design enables end-to-end training and real-\ntime speeds while maintaining high average precision.\nOur system divides the input image into an S\u00d7Sgrid.\nIf the center of an object falls into a grid cell, that grid cell\nis responsible for detecting that object.\nEach grid cell predicts Bbounding boxes and con\ufb01dence\nscores for those boxes. These con\ufb01dence scores re\ufb02ect how\ncon\ufb01dent the model is that the box contains an object and\nalso how accurate it thinks the box is that it predicts. For-\nmally we de\ufb01ne con\ufb01dence as Pr(Object )\u2217IOUtruth\npred. If no\nobject exists in that cell, the con\ufb01dence scores should be\nzero. Otherwise we want the con\ufb01dence score to equal the\nintersection over union (IOU) between the predicted box\nand the ground truth.\nEach bounding box consists of 5 predictions: x,y,w,h,\nand con\ufb01dence. The (x,y)coordinates represent the center\nof the box relative to the bounds of the grid cell. The width\nand height are predicted relative to the whole image. Finally\nthe con\ufb01dence prediction represents the IOU between the\npredicted box and any ground truth box.\nEach grid cell also predicts Cconditional class proba-\nbilities, Pr(Classi|Object ). These probabilities are condi-\ntioned on the grid cell containing an object. We only predictone set of class probabilities per grid cell, regardless of the\nnumber of boxes B.\nAt test time we multiply the conditional class probabili-\nties and the individual box con\ufb01dence predictions,\nPr(Classi|Object )\u2217Pr(Object )\u2217IOUtruth\npred= Pr( Classi)\u2217IOUtruth\npred(1)\nwhich gives us class-speci\ufb01c con\ufb01dence scores for each\nbox.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3081, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "688909d9-489d-419e-a53d-eef5ad62cf0d": {"__data__": {"id_": "688909d9-489d-419e-a53d-eef5ad62cf0d", "embedding": null, "metadata": {"page_label": "2", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f32f11f8-dc17-40e1-a1bc-accbd7334191", "node_type": "4", "metadata": {"page_label": "2", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "f9042a0e0290a7b7f39fb1482c2c904452ec68d9c304d3ac52273b688cfed936", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "95b7f60b-866f-4c95-9142-9656dd59a796", "node_type": "1", "metadata": {"page_label": "2", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "75ddeb7d7eed8d52ab7fd4c7e844d56cb3f98aaa5b5185af65d2909f3d743c3b", "class_name": "RelatedNodeInfo"}}, "text": "These scores encode both the probability of that class\nappearing in the box and how well the predicted box \ufb01ts the\nobject.\nS \u00d7 S grid on inputBounding boxes + confidence\nClass probability mapFinal detections\nFigure 2: The Model. Our system models detection as a regres-\nsion problem. It divides the image into an S\u00d7Sgrid and for each\ngrid cell predicts Bbounding boxes, con\ufb01dence for those boxes,\nandCclass probabilities. These predictions are encoded as an\nS\u00d7S\u00d7(B\u22175 +C)tensor.\nFor evaluating YOLO on P ASCAL VOC, we use S= 7,\nB= 2. PASCAL VOC has 20 labelled classes so C= 20 .\nOur \ufb01nal prediction is a 7\u00d77\u00d730tensor.\n2.1. Network Design\nWe implement this model as a convolutional neural net-\nwork and evaluate it on the P ASCAL VOC detection dataset\n[9]. The initial convolutional layers of the network extract\nfeatures from the image while the fully connected layers\npredict the output probabilities and coordinates.\nOur network architecture is inspired by the GoogLeNet\nmodel for image classi\ufb01cation [34]. Our network has 24\nconvolutional layers followed by 2 fully connected layers.\nInstead of the inception modules used by GoogLeNet, we\nsimply use 1\u00d71reduction layers followed by 3\u00d73convo-\nlutional layers, similar to Lin et al [22]. The full network is\nshown in Figure 3.\nWe also train a fast version of YOLO designed to push\nthe boundaries of fast object detection. Fast YOLO uses a\nneural network with fewer convolutional layers (9 instead\nof 24) and fewer \ufb01lters in those layers. Other than the size\nof the network, all training and testing parameters are the\nsame between YOLO and Fast YOLO.", "mimetype": "text/plain", "start_char_idx": 3082, "end_char_idx": 4683, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "677352d8-edf6-406d-be64-eac248dcf151": {"__data__": {"id_": "677352d8-edf6-406d-be64-eac248dcf151", "embedding": null, "metadata": {"page_label": "3", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "60df2287-5d40-4113-9aa0-aee9cdab5408", "node_type": "4", "metadata": {"page_label": "3", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "c7482ea19d80897f240c87c0d4c8a4bb6a1f4b82b3bd529c3d6d93ffba8a8491", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d746aca8-dc1c-4f4c-a779-d3370aff2fe0", "node_type": "1", "metadata": {}, "hash": "b12bed537b6ec6383068a01b823042923414f7d3eea7b00ffca9d1a3837efb01", "class_name": "RelatedNodeInfo"}}, "text": "448\n448\n3\n7\n7\nConv. Layer\n7x7x64-s-2\nMaxpool Layer\n2x2-s-2\n3\n3112\n112\n192\n3\n356\n56\n256\nConn. Layer4096\nConn. Layer Conv. Layer\n3x3x192\nMaxpool Layer\n2x2-s-2Conv. Layers\n1x1x128\n3x3x256\n1x1x256\n3x3x512\nMaxpool Layer\n2x2-s-2\n3\n328\n28\n512\nConv. Layers\n1x1x256\n3x3x5121x1x512\n3x3x1024\nMaxpool Layer\n2x2-s-2\n3\n314\n14\n1024\nConv. Layers\n1x1x512\n3x3x10243x3x1024\n3x3x1024-s-2\n3\n37\n7\n10247\n7\n10247\n7\n30\n} \u00d74 } \u00d72Conv. Layers\n3x3x1024\n3x3x1024Figure 3: The Architecture. Our detection network has 24 convolutional layers followed by 2 fully connected layers. Alternating 1\u00d71\nconvolutional layers reduce the features space from preceding layers. We pretrain the convolutional layers on the ImageNet classi\ufb01cation\ntask at half the resolution ( 224\u00d7224input image) and then double the resolution for detection.\nThe \ufb01nal output of our network is the 7\u00d77\u00d730tensor\nof predictions.\n2.2. Training\nWe pretrain our convolutional layers on the ImageNet\n1000-class competition dataset [30]. For pretraining we use\nthe \ufb01rst 20 convolutional layers from Figure 3 followed by a\naverage-pooling layer and a fully connected layer. We train\nthis network for approximately a week and achieve a single\ncrop top-5 accuracy of 88% on the ImageNet 2012 valida-\ntion set, comparable to the GoogLeNet models in Caffe\u2019s\nModel Zoo [24]. We use the Darknet framework for all\ntraining and inference [26].\nWe then convert the model to perform detection. Ren et\nal. show that adding both convolutional and connected lay-\ners to pretrained networks can improve performance [29].\nFollowing their example, we add four convolutional lay-\ners and two fully connected layers with randomly initialized\nweights. Detection often requires \ufb01ne-grained visual infor-\nmation so we increase the input resolution of the network\nfrom 224\u00d7224to448\u00d7448.\nOur \ufb01nal layer predicts both class probabilities and\nbounding box coordinates. We normalize the bounding box\nwidth and height by the image width and height so that they\nfall between 0 and 1. We parametrize the bounding box x\nandycoordinates to be offsets of a particular grid cell loca-\ntion so they are also bounded between 0 and 1.\nWe use a linear activation function for the \ufb01nal layer and\nall other layers use the following leaky recti\ufb01ed linear acti-\nvation:\n\u03c6(x) ={\nx, ifx>0\n0.1x,otherwise(2)\nWe optimize for sum-squared error in the output of ourmodel. We use sum-squared error because it is easy to op-\ntimize, however it does not perfectly align with our goal of\nmaximizing average precision.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2496, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d746aca8-dc1c-4f4c-a779-d3370aff2fe0": {"__data__": {"id_": "d746aca8-dc1c-4f4c-a779-d3370aff2fe0", "embedding": null, "metadata": {"page_label": "3", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "60df2287-5d40-4113-9aa0-aee9cdab5408", "node_type": "4", "metadata": {"page_label": "3", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "c7482ea19d80897f240c87c0d4c8a4bb6a1f4b82b3bd529c3d6d93ffba8a8491", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "677352d8-edf6-406d-be64-eac248dcf151", "node_type": "1", "metadata": {"page_label": "3", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "6456da5bed101a428353400f2b8e9f27a13592b6aecc05776c2a2e200a2757d5", "class_name": "RelatedNodeInfo"}}, "text": "It weights localization er-\nror equally with classi\ufb01cation error which may not be ideal.\nAlso, in every image many grid cells do not contain any\nobject. This pushes the \u201ccon\ufb01dence\u201d scores of those cells\ntowards zero, often overpowering the gradient from cells\nthat do contain objects. This can lead to model instability,\ncausing training to diverge early on.\nTo remedy this, we increase the loss from bounding box\ncoordinate predictions and decrease the loss from con\ufb01-\ndence predictions for boxes that don\u2019t contain objects. We\nuse two parameters, \u03bbcoordand\u03bbnoobjto accomplish this. We\nset\u03bbcoord= 5and\u03bbnoobj=.5.\nSum-squared error also equally weights errors in large\nboxes and small boxes. Our error metric should re\ufb02ect that\nsmall deviations in large boxes matter less than in small\nboxes. To partially address this we predict the square root\nof the bounding box width and height instead of the width\nand height directly.\nYOLO predicts multiple bounding boxes per grid cell.\nAt training time we only want one bounding box predictor\nto be responsible for each object. We assign one predictor\nto be \u201cresponsible\u201d for predicting an object based on which\nprediction has the highest current IOU with the ground\ntruth. This leads to specialization between the bounding box\npredictors. Each predictor gets better at predicting certain\nsizes, aspect ratios, or classes of object, improving overall\nrecall.\nDuring training we optimize the following, multi-part", "mimetype": "text/plain", "start_char_idx": 2497, "end_char_idx": 3950, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c70aa6b1-950c-42af-8db1-f8915d8b3af0": {"__data__": {"id_": "c70aa6b1-950c-42af-8db1-f8915d8b3af0", "embedding": null, "metadata": {"page_label": "4", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "96ab01eb-edcf-46b4-a295-b15232dbe048", "node_type": "4", "metadata": {"page_label": "4", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "5076737cd7e2486957e2402434bcc0f3650f0529f54e2a548a563b36afca4cec", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "768a019d-5b8e-44fd-8954-b08b1e2ac27b", "node_type": "1", "metadata": {}, "hash": "d1f0da9b665ec0b80af1dd5e5a27f454fae2f34ee3e6108f956332bcb69d386c", "class_name": "RelatedNodeInfo"}}, "text": "loss function:\n\u03bbcoordS2\u2211\ni=0B\u2211\nj=01obj\nij[\n(xi\u2212\u02c6xi)2+ (yi\u2212\u02c6yi)2]\n+\u03bbcoordS2\u2211\ni=0B\u2211\nj=01obj\nij[(\u221awi\u2212\u221a\n\u02c6wi)2+(\u221a\nhi\u2212\u221a\n\u02c6hi)2]\n+S2\u2211\ni=0B\u2211\nj=01obj\nij(\nCi\u2212\u02c6Ci)2\n+\u03bbnoobjS2\u2211\ni=0B\u2211\nj=01noobj\nij(\nCi\u2212\u02c6Ci)2\n+S2\u2211\ni=01obj\ni\u2211\nc\u2208classes(pi(c)\u2212\u02c6pi(c))2(3)\nwhere 1obj\nidenotes if object appears in cell iand 1obj\nijde-\nnotes that the jth bounding box predictor in cell iis \u201cre-\nsponsible\u201d for that prediction.\nNote that the loss function only penalizes classi\ufb01cation\nerror if an object is present in that grid cell (hence the con-\nditional class probability discussed earlier). It also only pe-\nnalizes bounding box coordinate error if that predictor is\n\u201cresponsible\u201d for the ground truth box (i.e. has the highest\nIOU of any predictor in that grid cell).\nWe train the network for about 135 epochs on the train-\ning and validation data sets from P ASCAL VOC 2007 and\n2012. When testing on 2012 we also include the VOC 2007\ntest data for training. Throughout training we use a batch\nsize of 64, a momentum of 0.9and a decay of 0.0005 .\nOur learning rate schedule is as follows: For the \ufb01rst\nepochs we slowly raise the learning rate from 10\u22123to10\u22122.\nIf we start at a high learning rate our model often diverges\ndue to unstable gradients. We continue training with 10\u22122\nfor 75 epochs, then 10\u22123for 30 epochs, and \ufb01nally 10\u22124\nfor 30 epochs.\nTo avoid over\ufb01tting we use dropout and extensive data\naugmentation. A dropout layer with rate = .5 after the \ufb01rst\nconnected layer prevents co-adaptation between layers [18].\nFor data augmentation we introduce random scaling and\ntranslations of up to 20% of the original image size. We\nalso randomly adjust the exposure and saturation of the im-\nage by up to a factor of 1.5in the HSV color space.\n2.3. Inference\nJust like in training, predicting detections for a test image\nonly requires one network evaluation. On P ASCAL VOC the\nnetwork predicts 98 bounding boxes per image and class\nprobabilities for each box. YOLO is extremely fast at test\ntime since it only requires a single network evaluation, un-\nlike classi\ufb01er-based methods.\nThe grid design enforces spatial diversity in the bound-\ning box predictions. Often it is clear which grid cell an\nobject falls in to and the network only predicts one box for\neach object. However, some large objects or objects nearthe border of multiple cells can be well localized by multi-\nple cells. Non-maximal suppression can be used to \ufb01x these\nmultiple detections. While not critical to performance as it\nis for R-CNN or DPM, non-maximal suppression adds 2-\n3% in mAP.\n2.4.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2534, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "768a019d-5b8e-44fd-8954-b08b1e2ac27b": {"__data__": {"id_": "768a019d-5b8e-44fd-8954-b08b1e2ac27b", "embedding": null, "metadata": {"page_label": "4", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "96ab01eb-edcf-46b4-a295-b15232dbe048", "node_type": "4", "metadata": {"page_label": "4", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "5076737cd7e2486957e2402434bcc0f3650f0529f54e2a548a563b36afca4cec", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c70aa6b1-950c-42af-8db1-f8915d8b3af0", "node_type": "1", "metadata": {"page_label": "4", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "00abd41dc12f80b6e99bb1808f25e668375cc089c7cde47dedd0118d752d276c", "class_name": "RelatedNodeInfo"}}, "text": "2.4. Limitations of YOLO\nYOLO imposes strong spatial constraints on bounding\nbox predictions since each grid cell only predicts two boxes\nand can only have one class. This spatial constraint lim-\nits the number of nearby objects that our model can pre-\ndict. Our model struggles with small objects that appear in\ngroups, such as \ufb02ocks of birds.\nSince our model learns to predict bounding boxes from\ndata, it struggles to generalize to objects in new or unusual\naspect ratios or con\ufb01gurations. Our model also uses rela-\ntively coarse features for predicting bounding boxes since\nour architecture has multiple downsampling layers from the\ninput image.\nFinally, while we train on a loss function that approxi-\nmates detection performance, our loss function treats errors\nthe same in small bounding boxes versus large bounding\nboxes. A small error in a large box is generally benign but a\nsmall error in a small box has a much greater effect on IOU.\nOur main source of error is incorrect localizations.\n3. Comparison to Other Detection Systems\nObject detection is a core problem in computer vision.\nDetection pipelines generally start by extracting a set of\nrobust features from input images (Haar [25], SIFT [23],\nHOG [4], convolutional features [6]). Then, classi\ufb01ers\n[36, 21, 13, 10] or localizers [1, 32] are used to identify\nobjects in the feature space. These classi\ufb01ers or localizers\nare run either in sliding window fashion over the whole im-\nage or on some subset of regions in the image [35, 15, 39].\nWe compare the YOLO detection system to several top de-\ntection frameworks, highlighting key similarities and differ-\nences.\nDeformable parts models. Deformable parts models\n(DPM) use a sliding window approach to object detection\n[10]. DPM uses a disjoint pipeline to extract static features,\nclassify regions, predict bounding boxes for high scoring\nregions, etc. Our system replaces all of these disparate parts\nwith a single convolutional neural network. The network\nperforms feature extraction, bounding box prediction, non-\nmaximal suppression, and contextual reasoning all concur-\nrently. Instead of static features, the network trains the fea-\ntures in-line and optimizes them for the detection task. Our\nuni\ufb01ed architecture leads to a faster, more accurate model\nthan DPM.\nR-CNN. R-CNN and its variants use region proposals in-\nstead of sliding windows to \ufb01nd objects in images. Selective", "mimetype": "text/plain", "start_char_idx": 2530, "end_char_idx": 4933, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b45acafd-cc20-4cee-a800-a79741a79b4c": {"__data__": {"id_": "b45acafd-cc20-4cee-a800-a79741a79b4c", "embedding": null, "metadata": {"page_label": "5", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9e8148b1-aa25-4dbe-977c-5742d68c3064", "node_type": "4", "metadata": {"page_label": "5", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "d152e48408d83dee56ef3bbe497d0eca62512c72769ab4000c6389b16750be0d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "afc2cdca-d403-4542-90b6-621a828f2191", "node_type": "1", "metadata": {}, "hash": "ccf5db86d959bff642d4ec6326c5af71244a18c2571f0c58388626f9ef659c58", "class_name": "RelatedNodeInfo"}}, "text": "Search [35] generates potential bounding boxes, a convolu-\ntional network extracts features, an SVM scores the boxes, a\nlinear model adjusts the bounding boxes, and non-max sup-\npression eliminates duplicate detections. Each stage of this\ncomplex pipeline must be precisely tuned independently\nand the resulting system is very slow, taking more than 40\nseconds per image at test time [14].\nYOLO shares some similarities with R-CNN. Each grid\ncell proposes potential bounding boxes and scores those\nboxes using convolutional features. However, our system\nputs spatial constraints on the grid cell proposals which\nhelps mitigate multiple detections of the same object. Our\nsystem also proposes far fewer bounding boxes, only 98\nper image compared to about 2000 from Selective Search.\nFinally, our system combines these individual components\ninto a single, jointly optimized model.\nOther Fast Detectors Fast and Faster R-CNN focus on\nspeeding up the R-CNN framework by sharing computa-\ntion and using neural networks to propose regions instead\nof Selective Search [14] [28]. While they offer speed and\naccuracy improvements over R-CNN, both still fall short of\nreal-time performance.\nMany research efforts focus on speeding up the DPM\npipeline [31] [38] [5]. They speed up HOG computation,\nuse cascades, and push computation to GPUs. However,\nonly 30Hz DPM [31] actually runs in real-time.\nInstead of trying to optimize individual components of\na large detection pipeline, YOLO throws out the pipeline\nentirely and is fast by design.\nDetectors for single classes like faces or people can be\nhighly optimized since they have to deal with much less\nvariation [37]. YOLO is a general purpose detector that\nlearns to detect a variety of objects simultaneously.\nDeep MultiBox. Unlike R-CNN, Szegedy et al. train a\nconvolutional neural network to predict regions of interest\n[8] instead of using Selective Search. MultiBox can also\nperform single object detection by replacing the con\ufb01dence\nprediction with a single class prediction. However, Multi-\nBox cannot perform general object detection and is still just\na piece in a larger detection pipeline, requiring further im-\nage patch classi\ufb01cation. Both YOLO and MultiBox use a\nconvolutional network to predict bounding boxes in an im-\nage but YOLO is a complete detection system.\nOverFeat. Sermanet et al. train a convolutional neural\nnetwork to perform localization and adapt that localizer to\nperform detection [32]. OverFeat ef\ufb01ciently performs slid-\ning window detection but it is still a disjoint system. Over-\nFeat optimizes for localization, not detection performance.\nLike DPM, the localizer only sees local information when\nmaking a prediction. OverFeat cannot reason about global\ncontext and thus requires signi\ufb01cant post-processing to pro-\nduce coherent detections.\nMultiGrasp. Our work is similar in design to work ongrasp detection by Redmon et al [27]. Our grid approach to\nbounding box prediction is based on the MultiGrasp system\nfor regression to grasps. However, grasp detection is a much\nsimpler task than object detection. MultiGrasp only needs\nto predict a single graspable region for an image containing\none object. It doesn\u2019t have to estimate the size, location,\nor boundaries of the object or predict it\u2019s class, only \ufb01nd a\nregion suitable for grasping.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3319, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "afc2cdca-d403-4542-90b6-621a828f2191": {"__data__": {"id_": "afc2cdca-d403-4542-90b6-621a828f2191", "embedding": null, "metadata": {"page_label": "5", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9e8148b1-aa25-4dbe-977c-5742d68c3064", "node_type": "4", "metadata": {"page_label": "5", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "d152e48408d83dee56ef3bbe497d0eca62512c72769ab4000c6389b16750be0d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b45acafd-cc20-4cee-a800-a79741a79b4c", "node_type": "1", "metadata": {"page_label": "5", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "4d138ab10ad5649b1ae0d7c2adc65f8f5e3035313ff883a4d42863cc89a4ca4c", "class_name": "RelatedNodeInfo"}}, "text": "YOLO predicts both bounding\nboxes and class probabilities for multiple objects of multi-\nple classes in an image.\n4. Experiments\nFirst we compare YOLO with other real-time detection\nsystems on P ASCAL VOC 2007. To understand the differ-\nences between YOLO and R-CNN variants we explore the\nerrors on VOC 2007 made by YOLO and Fast R-CNN, one\nof the highest performing versions of R-CNN [14]. Based\non the different error pro\ufb01les we show that YOLO can be\nused to rescore Fast R-CNN detections and reduce the er-\nrors from background false positives, giving a signi\ufb01cant\nperformance boost. We also present VOC 2012 results and\ncompare mAP to current state-of-the-art methods. Finally,\nwe show that YOLO generalizes to new domains better than\nother detectors on two artwork datasets.\n4.1. Comparison to Other Real-Time Systems\nMany research efforts in object detection focus on mak-\ning standard detection pipelines fast. [5] [38] [31] [14] [17]\n[28] However, only Sadeghi et al. actually produce a de-\ntection system that runs in real-time (30 frames per second\nor better) [31]. We compare YOLO to their GPU imple-\nmentation of DPM which runs either at 30Hz or 100Hz.\nWhile the other efforts don\u2019t reach the real-time milestone\nwe also compare their relative mAP and speed to examine\nthe accuracy-performance tradeoffs available in object de-\ntection systems.\nFast YOLO is the fastest object detection method on\nPASCAL ; as far as we know, it is the fastest extant object\ndetector. With 52.7%mAP, it is more than twice as accurate\nas prior work on real-time detection. YOLO pushes mAP to\n63.4%while still maintaining real-time performance.\nWe also train YOLO using VGG-16. This model is more\naccurate but also signi\ufb01cantly slower than YOLO. It is use-\nful for comparison to other detection systems that rely on\nVGG-16 but since it is slower than real-time the rest of the\npaper focuses on our faster models.\nFastest DPM effectively speeds up DPM without sacri-\n\ufb01cing much mAP but it still misses real-time performance\nby a factor of 2 [38]. It also is limited by DPM\u2019s relatively\nlow accuracy on detection compared to neural network ap-\nproaches.\nR-CNN minus R replaces Selective Search with static\nbounding box proposals [20]. While it is much faster than", "mimetype": "text/plain", "start_char_idx": 3320, "end_char_idx": 5574, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2f6ea2b1-d7bb-425c-a743-592c9ca274c3": {"__data__": {"id_": "2f6ea2b1-d7bb-425c-a743-592c9ca274c3", "embedding": null, "metadata": {"page_label": "6", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "86f02e55-f513-40f9-abe3-b17d2d6cd99a", "node_type": "4", "metadata": {"page_label": "6", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "1149b1b4871eafbd8600422296e9187a5508c36c410dbcf80843a263cad7c8fc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "38624dfc-ca34-4524-a1fc-c11cb87aeea7", "node_type": "1", "metadata": {}, "hash": "7ce9d3e330bbb474f9dac9c2cc5ff78f3aea79f412f3ed42f1f9f69836fbe4a4", "class_name": "RelatedNodeInfo"}}, "text": "Real-Time Detectors Train mAP FPS\n100Hz DPM [31] 2007 16.0 100\n30Hz DPM [31] 2007 26.1 30\nFast YOLO 2007+2012 52.7 155\nYOLO 2007+2012 63.4 45\nLess Than Real-Time\nFastest DPM [38] 2007 30.4 15\nR-CNN Minus R [20] 2007 53.5 6\nFast R-CNN [14] 2007+2012 70.0 0.5\nFaster R-CNN VGG-16[28] 2007+2012 73.2 7\nFaster R-CNN ZF [28] 2007+2012 62.1 18\nYOLO VGG-16 2007+2012 66.4 21\nTable 1: Real-Time Systems on P ASCAL VOC 2007. Compar-\ning the performance and speed of fast detectors. Fast YOLO is\nthe fastest detector on record for P ASCAL VOC detection and is\nstill twice as accurate as any other real-time detector. YOLO is\n10 mAP more accurate than the fast version while still well above\nreal-time in speed.\nR-CNN, it still falls short of real-time and takes a signi\ufb01cant\naccuracy hit from not having good proposals.\nFast R-CNN speeds up the classi\ufb01cation stage of R-CNN\nbut it still relies on selective search which can take around\n2 seconds per image to generate bounding box proposals.\nThus it has high mAP but at 0.5fps it is still far from real-\ntime.\nThe recent Faster R-CNN replaces selective search with\na neural network to propose bounding boxes, similar to\nSzegedy et al. [8] In our tests, their most accurate model\nachieves 7 fps while a smaller, less accurate one runs at\n18 fps. The VGG-16 version of Faster R-CNN is 10 mAP\nhigher but is also 6 times slower than YOLO. The Zeiler-\nFergus Faster R-CNN is only 2.5 times slower than YOLO\nbut is also less accurate.\n4.2. VOC 2007 Error Analysis\nTo further examine the differences between YOLO and\nstate-of-the-art detectors, we look at a detailed breakdown\nof results on VOC 2007. We compare YOLO to Fast R-\nCNN since Fast R-CNN is one of the highest performing\ndetectors on P ASCAL and it\u2019s detections are publicly avail-\nable.\nWe use the methodology and tools of Hoiem et al. [19]\nFor each category at test time we look at the top N predic-\ntions for that category. Each prediction is either correct or\nit is classi\ufb01ed based on the type of error:\n\u2022Correct: correct class and IOU >.5\n\u2022Localization: correct class, .1<IOU<.5\n\u2022Similar: class is similar, IOU >.1\nCorrect: 71.6% Correct: 65.5%Loc: 8.6%Sim: 4.3%Other: 1.9%Background: 13.6%\nLoc: 19.0%Sim: 6.75%Other: 4.0%Background: 4.75%Fast R-CNN YOLOFigure 4: Error Analysis: Fast R-CNN vs.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2293, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "38624dfc-ca34-4524-a1fc-c11cb87aeea7": {"__data__": {"id_": "38624dfc-ca34-4524-a1fc-c11cb87aeea7", "embedding": null, "metadata": {"page_label": "6", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "86f02e55-f513-40f9-abe3-b17d2d6cd99a", "node_type": "4", "metadata": {"page_label": "6", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "1149b1b4871eafbd8600422296e9187a5508c36c410dbcf80843a263cad7c8fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2f6ea2b1-d7bb-425c-a743-592c9ca274c3", "node_type": "1", "metadata": {"page_label": "6", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "ef17eee5dfd9482824dcf7534c89155b060c830d5fc1d546ae6ec1d217bb72e1", "class_name": "RelatedNodeInfo"}}, "text": "YOLO These\ncharts show the percentage of localization and background errors\nin the top N detections for various categories (N = # objects in that\ncategory).\n\u2022Other: class is wrong, IOU >.1\n\u2022Background: IOU <.1for any object\nFigure 4 shows the breakdown of each error type aver-\naged across all 20 classes.\nYOLO struggles to localize objects correctly. Localiza-\ntion errors account for more of YOLO\u2019s errors than all other\nsources combined. Fast R-CNN makes much fewer local-\nization errors but far more background errors. 13.6% of\nit\u2019s top detections are false positives that don\u2019t contain any\nobjects. Fast R-CNN is almost 3x more likely to predict\nbackground detections than YOLO.\n4.3. Combining Fast R-CNN and YOLO\nYOLO makes far fewer background mistakes than Fast\nR-CNN. By using YOLO to eliminate background detec-\ntions from Fast R-CNN we get a signi\ufb01cant boost in perfor-\nmance. For every bounding box that R-CNN predicts we\ncheck to see if YOLO predicts a similar box. If it does, we\ngive that prediction a boost based on the probability pre-\ndicted by YOLO and the overlap between the two boxes.\nThe best Fast R-CNN model achieves a mAP of 71.8%\non the VOC 2007 test set. When combined with YOLO, its\nmAP Combined Gain\nFast R-CNN 71.8 - -\nFast R-CNN (2007 data) 66.9 72.4 .6\nFast R-CNN (VGG-M) 59.2 72.4 .6\nFast R-CNN (CaffeNet) 57.1 72.1 .3\nYOLO 63.4 75.0 3.2\nTable 2: Model combination experiments on VOC 2007. We\nexamine the effect of combining various models with the best ver-\nsion of Fast R-CNN. Other versions of Fast R-CNN provide only\na small bene\ufb01t while YOLO provides a signi\ufb01cant performance\nboost.", "mimetype": "text/plain", "start_char_idx": 2294, "end_char_idx": 3915, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fbbba503-d48d-4e22-a428-01e158875823": {"__data__": {"id_": "fbbba503-d48d-4e22-a428-01e158875823", "embedding": null, "metadata": {"page_label": "7", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d89999e8-2ffc-458d-89f1-db7684e14760", "node_type": "4", "metadata": {"page_label": "7", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "bf09548c0579d8d3a1f51b061dafa574f83e0929daa6e1b645571119a1e607a1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "05c3e2c8-6e02-4417-957a-11e755f3e037", "node_type": "1", "metadata": {}, "hash": "71e66b21c5ab7882e03f9f0dc990a92373fe82ae724379d3fc0b9f8aec9f769a", "class_name": "RelatedNodeInfo"}}, "text": "VOC 2012 test mAP aero bike bird boat bottle bus car cat chair cow table dog horse mbike personplant sheep sofa train tv\nMR CNN MORE DATA [11] 73.9 85.5 82.9 76.6 57.8 62.7 79.4 77.2 86.6 55.0 79.1 62.2 87.0 83.4 84.7 78.9 45.3 73.4 65.8 80.3 74.0\nHyperNet VGG 71.4 84.2 78.5 73.6 55.6 53.7 78.7 79.8 87.7 49.6 74.9 52.1 86.0 81.7 83.3 81.8 48.6 73.5 59.4 79.9 65.7\nHyperNet SP 71.3 84.1 78.3 73.3 55.5 53.6 78.6 79.6 87.5 49.5 74.9 52.1 85.6 81.6 83.2 81.6 48.4 73.2 59.3 79.7 65.6\nFast R-CNN + YOLO 70.7 83.4 78.5 73.5 55.8 43.4 79.1 73.1 89.4 49.4 75.5 57.0 87.5 80.9 81.0 74.7 41.8 71.5 68.5 82.1 67.2\nMR CNN SCNN [11] 70.7 85.0 79.6 71.5 55.3 57.7 76.0 73.9 84.6 50.5 74.3 61.7 85.5 79.9 81.7 76.4 41.0 69.0 61.2 77.7 72.1\nFaster R-CNN [28] 70.4 84.9 79.8 74.3 53.9 49.8 77.5 75.9 88.5 45.6 77.1 55.3 86.9 81.7 80.9 79.6 40.1 72.6 60.9 81.2 61.5\nDEEP ENS COCO 70.1 84.0 79.4 71.6 51.9 51.1 74.1 72.1 88.6 48.3 73.4 57.8 86.1 80.0 80.7 70.4 46.6 69.6 68.8 75.9 71.4\nNoC [29] 68.8 82.8 79.0 71.6 52.3 53.7 74.1 69.0 84.9 46.9 74.3 53.1 85.0 81.3 79.5 72.2 38.9 72.4 59.5 76.7 68.1\nFast R-CNN [14] 68.4 82.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1108, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "05c3e2c8-6e02-4417-957a-11e755f3e037": {"__data__": {"id_": "05c3e2c8-6e02-4417-957a-11e755f3e037", "embedding": null, "metadata": {"page_label": "7", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d89999e8-2ffc-458d-89f1-db7684e14760", "node_type": "4", "metadata": {"page_label": "7", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "bf09548c0579d8d3a1f51b061dafa574f83e0929daa6e1b645571119a1e607a1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fbbba503-d48d-4e22-a428-01e158875823", "node_type": "1", "metadata": {"page_label": "7", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "3e38465cf08334041da90b5f5499ac852e2394d61c4b12feb204973c7ad99ae2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4ecabde7-7489-4a1a-ab33-1d9b2b4f9ea4", "node_type": "1", "metadata": {}, "hash": "45466bd9f9e369435522695b57353e8122757ae9bffc3f33dae81943b27f8a85", "class_name": "RelatedNodeInfo"}}, "text": "7 68.1\nFast R-CNN [14] 68.4 82.3 78.4 70.8 52.3 38.7 77.8 71.6 89.3 44.2 73.0 55.0 87.5 80.5 80.8 72.0 35.1 68.3 65.7 80.4 64.2\nUMICH FGS STRUCT 66.4 82.9 76.1 64.1 44.6 49.4 70.3 71.2 84.6 42.7 68.6 55.8 82.7 77.1 79.9 68.7 41.4 69.0 60.0 72.0 66.2\nNUS NIN C2000 [7] 63.8 80.2 73.8 61.9 43.7 43.0 70.3 67.6 80.7 41.9 69.7 51.7 78.2 75.2 76.9 65.1 38.6 68.3 58.0 68.7 63.3\nBabyLearning [7] 63.2 78.0 74.2 61.3 45.7 42.7 68.2 66.8 80.2 40.6 70.0 49.8 79.0 74.5 77.9 64.0 35.3 67.9 55.7 68.7 62.6\nNUS NIN 62.4 77.9 73.1 62.6 39.5 43.3 69.1 66.4 78.9 39.1 68.1 50.0 77.2 71.3 76.1 64.7 38.4 66.9 56.2 66.9 62.7\nR-CNN VGG BB [13] 62.4 79.6 72.7 61.9 41.2 41.9 65.9 66.4 84.6 38.5 67.2 46.7 82.0 74.8 76.0 65.2 35.6 65.4 54.2 67.4 60.3\nR-CNN VGG [13] 59.2 76.8 70.9 56.6 37.5 36.9 62.9 63.6 81.1 35.7 64.3 43.9 80.4 71.6 74.0 60.0 30.8 63.4 52.0 63.5 58.7\nYOLO 57.9 77.0 67.2 57.7 38.3 22.7 68.3 55.9 81.4 36.2 60.8 48.5 77.2 72.3 71.3 63.5 28.9 52.2 54.8 73.9 50.8\nFeature Edit [33] 56.3 74.6 69.1 54.4 39.1 33.1 65.2 62.", "mimetype": "text/plain", "start_char_idx": 1077, "end_char_idx": 2094, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ecabde7-7489-4a1a-ab33-1d9b2b4f9ea4": {"__data__": {"id_": "4ecabde7-7489-4a1a-ab33-1d9b2b4f9ea4", "embedding": null, "metadata": {"page_label": "7", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d89999e8-2ffc-458d-89f1-db7684e14760", "node_type": "4", "metadata": {"page_label": "7", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "bf09548c0579d8d3a1f51b061dafa574f83e0929daa6e1b645571119a1e607a1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "05c3e2c8-6e02-4417-957a-11e755f3e037", "node_type": "1", "metadata": {"page_label": "7", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "488e5893fc2781d8df96f18186f418f926ceff1ea45cc9e9f3d4eb6a2c7cd973", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "aeed63a7-c10b-42e0-bc8f-87f249b9cf22", "node_type": "1", "metadata": {}, "hash": "dcd7eb69eeb68015b1741648e6a82f39187d91c9725dfc0c436571dba1b3d921", "class_name": "RelatedNodeInfo"}}, "text": "1 54.4 39.1 33.1 65.2 62.7 69.7 30.8 56.0 44.6 70.0 64.4 71.1 60.2 33.3 61.3 46.4 61.7 57.8\nR-CNN BB [13] 53.3 71.8 65.8 52.0 34.1 32.6 59.6 60.0 69.8 27.6 52.0 41.7 69.6 61.3 68.3 57.8 29.6 57.8 40.9 59.3 54.1\nSDS [16] 50.7 69.7 58.4 48.5 28.3 28.8 61.3 57.5 70.8 24.1 50.7 35.9 64.9 59.1 65.8 57.1 26.0 58.8 38.6 58.9 50.7\nR-CNN [13] 49.6 68.1 63.8 46.1 29.4 27.9 56.6 57.0 65.9 26.5 48.7 39.5 66.2 57.3 65.4 53.2 26.2 54.5 38.1 50.6 51.6\nTable 3: PASCAL VOC 2012 Leaderboard. YOLO compared with the full comp4 (outside data allowed) public leaderboard as of\nNovember 6th, 2015. Mean average precision and per-class average precision are shown for a variety of detection methods. YOLO is the\nonly real-time detector. Fast R-CNN + YOLO is the forth highest scoring method, with a 2.3% boost over Fast R-CNN.\nmAP increases by 3.2% to 75.0%. We also tried combining\nthe top Fast R-CNN model with several other versions of\nFast R-CNN. Those ensembles produced small increases in\nmAP between .3 and .6%, see Table 2 for details.\nThe boost from YOLO is not simply a byproduct of\nmodel ensembling since there is little bene\ufb01t from combin-\ning different versions of Fast R-CNN. Rather, it is precisely\nbecause YOLO makes different kinds of mistakes at test\ntime that it is so effective at boosting Fast R-CNN\u2019s per-\nformance.\nUnfortunately, this combination doesn\u2019t bene\ufb01t from the\nspeed of YOLO since we run each model seperately and\nthen combine the results. However, since YOLO is so fast\nit doesn\u2019t add any signi\ufb01cant computational time compared\nto Fast R-CNN.\n4.4. VOC 2012 Results\nOn the VOC 2012 test set, YOLO scores 57.9% mAP.\nThis is lower than the current state of the art, closer to\nthe original R-CNN using VGG-16, see Table 3. Our sys-\ntem struggles with small objects compared to its closest\ncompetitors. On categories like bottle ,sheep , and\ntv/monitor YOLO scores 8-10% lower than R-CNN or\nFeature Edit.", "mimetype": "text/plain", "start_char_idx": 2069, "end_char_idx": 3984, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aeed63a7-c10b-42e0-bc8f-87f249b9cf22": {"__data__": {"id_": "aeed63a7-c10b-42e0-bc8f-87f249b9cf22", "embedding": null, "metadata": {"page_label": "7", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d89999e8-2ffc-458d-89f1-db7684e14760", "node_type": "4", "metadata": {"page_label": "7", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "bf09548c0579d8d3a1f51b061dafa574f83e0929daa6e1b645571119a1e607a1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4ecabde7-7489-4a1a-ab33-1d9b2b4f9ea4", "node_type": "1", "metadata": {"page_label": "7", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "0671c9899f8859ce9d9ab2bb98681ee614eae980f1ae69e872fd8f86ccd3fdd6", "class_name": "RelatedNodeInfo"}}, "text": "However, on other categories like cat and\ntrain YOLO achieves higher performance.\nOur combined Fast R-CNN + YOLO model is one of the\nhighest performing detection methods. Fast R-CNN gets\na 2.3% improvement from the combination with YOLO,\nboosting it 5 spots up on the public leaderboard.\n4.5. Generalizability: Person Detection in Artwork\nAcademic datasets for object detection draw the training\nand testing data from the same distribution. In real-world\napplications it is hard to predict all possible use cases andthe test data can diverge from what the system has seen be-\nfore [3]. We compare YOLO to other detection systems on\nthe Picasso Dataset [12] and the People-Art Dataset [3], two\ndatasets for testing person detection on artwork.\nFigure 5 shows comparative performance between\nYOLO and other detection methods. For reference, we give\nVOC 2007 detection AP on person where all models are\ntrained only on VOC 2007 data. On Picasso models are\ntrained on VOC 2012 while on People-Art they are trained\non VOC 2010.\nR-CNN has high AP on VOC 2007. However, R-CNN\ndrops off considerably when applied to artwork. R-CNN\nuses Selective Search for bounding box proposals which is\ntuned for natural images. The classi\ufb01er step in R-CNN only\nsees small regions and needs good proposals.\nDPM maintains its AP well when applied to artwork.\nPrior work theorizes that DPM performs well because it has\nstrong spatial models of the shape and layout of objects.\nThough DPM doesn\u2019t degrade as much as R-CNN, it starts\nfrom a lower AP.\nYOLO has good performance on VOC 2007 and its AP\ndegrades less than other methods when applied to artwork.\nLike DPM, YOLO models the size and shape of objects,\nas well as relationships between objects and where objects\ncommonly appear. Artwork and natural images are very\ndifferent on a pixel level but they are similar in terms of\nthe size and shape of objects, thus YOLO can still predict\ngood bounding boxes and detections.\n5. Real-Time Detection In The Wild\nYOLO is a fast, accurate object detector, making it ideal\nfor computer vision applications. We connect YOLO to a\nwebcam and verify that it maintains real-time performance,", "mimetype": "text/plain", "start_char_idx": 3985, "end_char_idx": 6143, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c14b7e59-46d8-4b97-bc58-4e2ea53b757c": {"__data__": {"id_": "c14b7e59-46d8-4b97-bc58-4e2ea53b757c", "embedding": null, "metadata": {"page_label": "8", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3a9481c6-42aa-44fb-ab6b-281a2a3f49ea", "node_type": "4", "metadata": {"page_label": "8", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "3673d3031790ac7d5fd0f776e11225c812d6de9a75af3e2ebc7d43d171f17fb9", "class_name": "RelatedNodeInfo"}}, "text": "Poselets\nRCNN\nD&THumans\nDPMYOLO\n(a)Picasso Dataset precision-recall curves.VOC 2007 Picasso People-Art\nAP AP BestF1 AP\nYOLO 59.2 53.3 0.590 45\nR-CNN 54.2 10.4 0.226 26\nDPM 43.2 37.8 0.458 32\nPoselets [2] 36.5 17.8 0.271\nD&T [4] - 1.9 0.051\n(b)Quantitative results on the VOC 2007, Picasso, and People-Art Datasets.\nThe Picasso Dataset evaluates on both AP and best F1score.\nFigure 5: Generalization results on Picasso and People-Art datasets.\nFigure 6: Qualitative Results. YOLO running on sample artwork and natural images from the internet. It is mostly accurate although it\ndoes think one person is an airplane.\nincluding the time to fetch images from the camera and dis-\nplay the detections.\nThe resulting system is interactive and engaging. While\nYOLO processes images individually, when attached to a\nwebcam it functions like a tracking system, detecting ob-\njects as they move around and change in appearance. A\ndemo of the system and the source code can be found on\nour project website: http://pjreddie.com/yolo/ .\n6. Conclusion\nWe introduce YOLO, a uni\ufb01ed model for object detec-\ntion. Our model is simple to construct and can be traineddirectly on full images. Unlike classi\ufb01er-based approaches,\nYOLO is trained on a loss function that directly corresponds\nto detection performance and the entire model is trained\njointly.\nFast YOLO is the fastest general-purpose object detec-\ntor in the literature and YOLO pushes the state-of-the-art in\nreal-time object detection. YOLO also generalizes well to\nnew domains making it ideal for applications that rely on\nfast, robust object detection.\nAcknowledgements: This work is partially supported by\nONR N00014-13-1-0720, NSF IIS-1338054, and The Allen\nDistinguished Investigator Award.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1737, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b803fd9-af71-42f1-a138-04a629859ebb": {"__data__": {"id_": "8b803fd9-af71-42f1-a138-04a629859ebb", "embedding": null, "metadata": {"page_label": "9", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "db20a2fb-fc13-4379-8672-62afc495565a", "node_type": "4", "metadata": {"page_label": "9", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "d87f6f4e8109db658df24fde1accc787ab6e4c98d5cdb6951344d4e3a32ed2a1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b3b21366-e166-444d-a6e9-f928ed31e89f", "node_type": "1", "metadata": {}, "hash": "868fd6f8d73fa520c68267701b1b251a6045b2f01da880c04464a134ad4899b3", "class_name": "RelatedNodeInfo"}}, "text": "References\n[1] M. B. Blaschko and C. H. Lampert. Learning to localize ob-\njects with structured output regression. In Computer Vision\u2013\nECCV 2008 , pages 2\u201315. Springer, 2008. 4\n[2] L. Bourdev and J. Malik. Poselets: Body part detectors\ntrained using 3d human pose annotations. In International\nConference on Computer Vision (ICCV) , 2009. 8\n[3] H. Cai, Q. Wu, T. Corradi, and P. Hall. The cross-\ndepiction problem: Computer vision algorithms for recog-\nnising objects in artwork and in photographs. arXiv preprint\narXiv:1505.00110 , 2015. 7\n[4] N. Dalal and B. Triggs. Histograms of oriented gradients for\nhuman detection. In Computer Vision and Pattern Recogni-\ntion, 2005. CVPR 2005. IEEE Computer Society Conference\non, volume 1, pages 886\u2013893. IEEE, 2005. 4, 8\n[5] T. Dean, M. Ruzon, M. Segal, J. Shlens, S. Vijaya-\nnarasimhan, J. Yagnik, et al. Fast, accurate detection of\n100,000 object classes on a single machine. In Computer\nVision and Pattern Recognition (CVPR), 2013 IEEE Confer-\nence on , pages 1814\u20131821. IEEE, 2013. 5\n[6] J. Donahue, Y . Jia, O. Vinyals, J. Hoffman, N. Zhang,\nE. Tzeng, and T. Darrell. Decaf: A deep convolutional acti-\nvation feature for generic visual recognition. arXiv preprint\narXiv:1310.1531 , 2013. 4\n[7] J. Dong, Q. Chen, S. Yan, and A. Yuille. Towards uni\ufb01ed\nobject detection and semantic segmentation. In Computer\nVision\u2013ECCV 2014 , pages 299\u2013314. Springer, 2014. 7\n[8] D. Erhan, C. Szegedy, A. Toshev, and D. Anguelov. Scalable\nobject detection using deep neural networks. In Computer\nVision and Pattern Recognition (CVPR), 2014 IEEE Confer-\nence on , pages 2155\u20132162. IEEE, 2014. 5, 6\n[9] M. Everingham, S. M. A. Eslami, L. Van Gool, C. K. I.\nWilliams, J. Winn, and A. Zisserman. The pascal visual ob-\nject classes challenge: A retrospective. International Journal\nof Computer Vision , 111(1):98\u2013136, Jan. 2015. 2\n[10] P. F. Felzenszwalb, R. B. Girshick, D. McAllester, and D. Ra-\nmanan. Object detection with discriminatively trained part\nbased models. IEEE Transactions on Pattern Analysis and\nMachine Intelligence , 32(9):1627\u20131645, 2010. 1, 4\n[11] S. Gidaris and N. Komodakis.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2123, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b3b21366-e166-444d-a6e9-f928ed31e89f": {"__data__": {"id_": "b3b21366-e166-444d-a6e9-f928ed31e89f", "embedding": null, "metadata": {"page_label": "9", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "db20a2fb-fc13-4379-8672-62afc495565a", "node_type": "4", "metadata": {"page_label": "9", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "d87f6f4e8109db658df24fde1accc787ab6e4c98d5cdb6951344d4e3a32ed2a1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b803fd9-af71-42f1-a138-04a629859ebb", "node_type": "1", "metadata": {"page_label": "9", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "602eecf8481050e559ecccdd16137e5452479fdd9c19b12452bc5cbf01e88f9c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e522baf0-670f-41ce-a5fa-cf1de546d418", "node_type": "1", "metadata": {}, "hash": "657e92639107f956344dc0e79f275d0adeedccdbb8a59b458e3a2ea1d89cf06b", "class_name": "RelatedNodeInfo"}}, "text": "Object detection via a multi-\nregion & semantic segmentation-aware CNN model. CoRR ,\nabs/1505.01749, 2015. 7\n[12] S. Ginosar, D. Haas, T. Brown, and J. Malik. Detecting peo-\nple in cubist art. In Computer Vision-ECCV 2014 Workshops ,\npages 101\u2013116. Springer, 2014. 7\n[13] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich fea-\nture hierarchies for accurate object detection and semantic\nsegmentation. In Computer Vision and Pattern Recognition\n(CVPR), 2014 IEEE Conference on , pages 580\u2013587. IEEE,\n2014. 1, 4, 7\n[14] R. B. Girshick. Fast R-CNN. CoRR , abs/1504.08083, 2015.\n2, 5, 6, 7\n[15] S. Gould, T. Gao, and D. Koller. Region-based segmenta-\ntion and object detection. In Advances in neural information\nprocessing systems , pages 655\u2013663, 2009. 4[16] B. Hariharan, P. Arbel \u00b4aez, R. Girshick, and J. Malik. Simul-\ntaneous detection and segmentation. In Computer Vision\u2013\nECCV 2014 , pages 297\u2013312. Springer, 2014. 7\n[17] K. He, X. Zhang, S. Ren, and J. Sun. Spatial pyramid pooling\nin deep convolutional networks for visual recognition. arXiv\npreprint arXiv:1406.4729 , 2014. 5\n[18] G. E. Hinton, N. Srivastava, A. Krizhevsky, I. Sutskever, and\nR. R. Salakhutdinov. Improving neural networks by pre-\nventing co-adaptation of feature detectors. arXiv preprint\narXiv:1207.0580 , 2012. 4\n[19] D. Hoiem, Y . Chodpathumwan, and Q. Dai. Diagnosing error\nin object detectors. In Computer Vision\u2013ECCV 2012 , pages\n340\u2013353. Springer, 2012. 6\n[20] K. Lenc and A. Vedaldi. R-cnn minus r. arXiv preprint\narXiv:1506.06981 , 2015. 5, 6\n[21] R. Lienhart and J. Maydt. An extended set of haar-like fea-\ntures for rapid object detection. In Image Processing. 2002.\nProceedings. 2002 International Conference on , volume 1,\npages I\u2013900. IEEE, 2002. 4\n[22] M. Lin, Q. Chen, and S. Yan. Network in network. CoRR ,\nabs/1312.4400, 2013. 2\n[23] D. G. Lowe. Object recognition from local scale-invariant\nfeatures. In Computer vision, 1999. The proceedings of the\nseventh IEEE international conference on , volume 2, pages\n1150\u20131157. Ieee, 1999.", "mimetype": "text/plain", "start_char_idx": 2124, "end_char_idx": 4154, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e522baf0-670f-41ce-a5fa-cf1de546d418": {"__data__": {"id_": "e522baf0-670f-41ce-a5fa-cf1de546d418", "embedding": null, "metadata": {"page_label": "9", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "db20a2fb-fc13-4379-8672-62afc495565a", "node_type": "4", "metadata": {"page_label": "9", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "d87f6f4e8109db658df24fde1accc787ab6e4c98d5cdb6951344d4e3a32ed2a1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b3b21366-e166-444d-a6e9-f928ed31e89f", "node_type": "1", "metadata": {"page_label": "9", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "264e87c9e166440ff032d8ead2b1956a53feffccb99ade021a1a0bb8ec0a7bf4", "class_name": "RelatedNodeInfo"}}, "text": "Ieee, 1999. 4\n[24] D. Mishkin. Models accuracy on imagenet 2012\nval. https://github.com/BVLC/caffe/wiki/\nModels-accuracy-on-ImageNet-2012-val . Ac-\ncessed: 2015-10-2. 3\n[25] C. P. Papageorgiou, M. Oren, and T. Poggio. A general\nframework for object detection. In Computer vision, 1998.\nsixth international conference on , pages 555\u2013562. IEEE,\n1998. 4\n[26] J. Redmon. Darknet: Open source neural networks in c.\nhttp://pjreddie.com/darknet/ , 2013\u20132016. 3\n[27] J. Redmon and A. Angelova. Real-time grasp detection using\nconvolutional neural networks. CoRR , abs/1412.3128, 2014.\n5\n[28] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: To-\nwards real-time object detection with region proposal net-\nworks. arXiv preprint arXiv:1506.01497 , 2015. 5, 6, 7\n[29] S. Ren, K. He, R. B. Girshick, X. Zhang, and J. Sun. Object\ndetection networks on convolutional feature maps. CoRR ,\nabs/1504.06066, 2015. 3, 7\n[30] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh,\nS. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein,\nA. C. Berg, and L. Fei-Fei. ImageNet Large Scale Visual\nRecognition Challenge. International Journal of Computer\nVision (IJCV) , 2015. 3\n[31] M. A. Sadeghi and D. Forsyth. 30hz object detection with\ndpm v5. In Computer Vision\u2013ECCV 2014 , pages 65\u201379.\nSpringer, 2014. 5, 6\n[32] P. Sermanet, D. Eigen, X. Zhang, M. Mathieu, R. Fergus,\nand Y . LeCun. Overfeat: Integrated recognition, localiza-\ntion and detection using convolutional networks. CoRR ,\nabs/1312.6229, 2013. 4, 5", "mimetype": "text/plain", "start_char_idx": 4143, "end_char_idx": 5637, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "371e5600-4d8b-41bc-910e-e77bc49885db": {"__data__": {"id_": "371e5600-4d8b-41bc-910e-e77bc49885db", "embedding": null, "metadata": {"page_label": "10", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "30ad233f-cc9b-4e1b-845b-6cc1e50caa88", "node_type": "4", "metadata": {"page_label": "10", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}, "hash": "3036bb0664be0aff5f0789dc842c726915e84f3a5db2579377c6a32acf5aafff", "class_name": "RelatedNodeInfo"}}, "text": "[33] Z. Shen and X. Xue. Do more dropouts in pool5 feature maps\nfor better object detection. arXiv preprint arXiv:1409.6911 ,\n2014. 7\n[34] C. Szegedy, W. Liu, Y . Jia, P. Sermanet, S. Reed,\nD. Anguelov, D. Erhan, V . Vanhoucke, and A. Rabinovich.\nGoing deeper with convolutions. CoRR , abs/1409.4842,\n2014. 2\n[35] J. R. Uijlings, K. E. van de Sande, T. Gevers, and A. W.\nSmeulders. Selective search for object recognition. Inter-\nnational journal of computer vision , 104(2):154\u2013171, 2013.\n4\n[36] P. Viola and M. Jones. Robust real-time object detection.\nInternational Journal of Computer Vision , 4:34\u201347, 2001. 4\n[37] P. Viola and M. J. Jones. Robust real-time face detection.\nInternational journal of computer vision , 57(2):137\u2013154,\n2004. 5\n[38] J. Yan, Z. Lei, L. Wen, and S. Z. Li. The fastest deformable\npart model for object detection. In Computer Vision and Pat-\ntern Recognition (CVPR), 2014 IEEE Conference on , pages\n2497\u20132504. IEEE, 2014. 5, 6\n[39] C. L. Zitnick and P. Doll \u00b4ar. Edge boxes: Locating object pro-\nposals from edges. In Computer Vision\u2013ECCV 2014 , pages\n391\u2013405. Springer, 2014. 4", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1108, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"69206787-f62b-47ab-b702-951c6f6f0953": {"node_ids": ["34df177c-c8fe-4c67-bbff-519f21a05cb5"], "metadata": {"page_label": "1", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}, "6f6d8327-f68e-4b45-b04e-000e69ba44f6": {"node_ids": ["47ccf89b-8f8b-4a71-984f-1a0b526067c4", "e5719cbf-6257-48b8-8d8b-8757566c3632"], "metadata": {"page_label": "2", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}, "3995196e-f983-4927-ab08-25822bafaad9": {"node_ids": ["432ebade-76b0-47f3-bd46-ce5fc4ab4f60"], "metadata": {"page_label": "3", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}, "ff9c5728-d25d-4ef2-a13b-dfcd7645cb82": {"node_ids": ["2630029c-98cd-485c-8f51-efe6b47b1549"], "metadata": {"page_label": "4", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}, "22bd2a6a-c4f0-42e7-8183-07f0f09ee118": {"node_ids": ["66f87375-230e-4974-8977-f1f34a5f3fc5"], "metadata": {"page_label": "5", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}, "52fc8216-c477-4f3f-81b4-75ca0022157c": {"node_ids": ["88a26f90-cbbd-4dc4-b37a-567739a99802", "8f2cba8f-29bc-4d2e-b1a3-0989a27f547e"], "metadata": {"page_label": "6", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}, "2fdcdbba-0544-44bc-ae72-08ab85786a5d": {"node_ids": ["27a64440-52f3-486a-99f1-7dbe6dbb5ad8"], "metadata": {"page_label": "7", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}, "e4decee7-ec35-451f-95c6-75fa815a8541": {"node_ids": ["eff381f9-87e4-44a4-a537-3ee80649c8da", "2362d688-4062-4fc5-b301-59bcafa7283a"], "metadata": {"page_label": "8", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}, "08e6cd22-bd6f-4665-9fc2-fd46bb6c4648": {"node_ids": ["94520a43-201e-4f7e-a7c6-fa073bee202e", "99074269-b92b-4d09-b7fd-d5891880bcfc"], "metadata": {"page_label": "9", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}, "95c58b2c-7718-4e13-9a3a-cc3ffc8cdca0": {"node_ids": ["3f3a9ec8-2660-4093-9d94-abfd95dacdd3", "af8ce8ec-1926-44ed-bc12-28bc9be96a3e"], "metadata": {"page_label": "10", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}, "fa4f7a41-cdda-42a2-b60b-adda7d234dbe": {"node_ids": ["06e8dde6-c086-4692-9b62-f78adcb23557"], "metadata": {"page_label": "11", "file_name": "transformer.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\transformer.pdf", "file_type": "application/pdf", "file_size": 569417, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}, "bdb87fc3-5df1-42b5-805d-66623d2b9afe": {"node_ids": ["68c77fa7-411f-4263-bdbe-d9e7b9051490", "de2df8a6-6a8f-4786-bfc4-76ea93c7135f"], "metadata": {"page_label": "1", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}, "f32f11f8-dc17-40e1-a1bc-accbd7334191": {"node_ids": ["95b7f60b-866f-4c95-9142-9656dd59a796", "688909d9-489d-419e-a53d-eef5ad62cf0d"], "metadata": {"page_label": "2", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}, "60df2287-5d40-4113-9aa0-aee9cdab5408": {"node_ids": ["677352d8-edf6-406d-be64-eac248dcf151", "d746aca8-dc1c-4f4c-a779-d3370aff2fe0"], "metadata": {"page_label": "3", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}, "96ab01eb-edcf-46b4-a295-b15232dbe048": {"node_ids": ["c70aa6b1-950c-42af-8db1-f8915d8b3af0", "768a019d-5b8e-44fd-8954-b08b1e2ac27b"], "metadata": {"page_label": "4", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}, "9e8148b1-aa25-4dbe-977c-5742d68c3064": {"node_ids": ["b45acafd-cc20-4cee-a800-a79741a79b4c", "afc2cdca-d403-4542-90b6-621a828f2191"], "metadata": {"page_label": "5", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}, "86f02e55-f513-40f9-abe3-b17d2d6cd99a": {"node_ids": ["2f6ea2b1-d7bb-425c-a743-592c9ca274c3", "38624dfc-ca34-4524-a1fc-c11cb87aeea7"], "metadata": {"page_label": "6", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}, "d89999e8-2ffc-458d-89f1-db7684e14760": {"node_ids": ["fbbba503-d48d-4e22-a428-01e158875823", "05c3e2c8-6e02-4417-957a-11e755f3e037", "4ecabde7-7489-4a1a-ab33-1d9b2b4f9ea4", "aeed63a7-c10b-42e0-bc8f-87f249b9cf22"], "metadata": {"page_label": "7", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}, "3a9481c6-42aa-44fb-ab6b-281a2a3f49ea": {"node_ids": ["c14b7e59-46d8-4b97-bc58-4e2ea53b757c"], "metadata": {"page_label": "8", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}, "db20a2fb-fc13-4379-8672-62afc495565a": {"node_ids": ["8b803fd9-af71-42f1-a138-04a629859ebb", "b3b21366-e166-444d-a6e9-f928ed31e89f", "e522baf0-670f-41ce-a5fa-cf1de546d418"], "metadata": {"page_label": "9", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}, "30ad233f-cc9b-4e1b-845b-6cc1e50caa88": {"node_ids": ["371e5600-4d8b-41bc-910e-e77bc49885db"], "metadata": {"page_label": "10", "file_name": "yolo.pdf", "file_path": "D:\\GEN-AI\\lama_index_demo_vscode\\Data\\yolo.pdf", "file_type": "application/pdf", "file_size": 5296750, "creation_date": "2024-10-21", "last_modified_date": "2024-10-21"}}}}